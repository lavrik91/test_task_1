version: "3.8"


services:
  app:
    build:
      context: .
    container_name: fastapi_app
    env_file:
      - .env.dev
    command: >
      bash -c "alembic upgrade head
      && cd src
      && gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind=0.0.0.0:8000"
    ports:
      - "9999:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      redis:
        condition: service_started
    volumes:
      - app_data:/app

  consumer:
    build:
      context: .
    container_name: consumer_app
    command: >
      bash -c "cd src
      && python consumer.py"
    restart: always
    volumes:
      - app_data:/app
    env_file:
      - .env.dev
    depends_on:
      rabbitmq:
        condition: service_healthy

  db:
    image: postgres:15
    hostname: postgres
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: "postgres"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    ports:
      - "5531:5531"
    volumes:
      - db_data:/var/lib/postgresql/data

  redis:
    image: redis:latest
    container_name: redis
    command:
      --port 6379
    expose:
      - 6379
    volumes:
      - redis_data:/data

  rabbitmq:
    image: "bitnami/rabbitmq:3.7"
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - "rabbitmq_data:/bitnami"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 10s
      retries: 5

  celery:
    build:
      context: .
    container_name: celery_app
    env_file:
      - .env.dev
    command: >
      bash -c "cd src
      && celery --app=celery_app:app_celery worker -l INFO"
    depends_on:
      app:
        condition: service_started
    volumes:
      - celery_data:/celery

volumes:
  db_data:
  redis_data:
  app_data:
  rabbitmq_data:
  celery_data:
